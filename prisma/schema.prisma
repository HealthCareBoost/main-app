// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"

}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    // Password ?
    // User Recipes
    // Favorite (Boolean)
    // Made (Boolean)
    image         String?
    accounts      Account[]
    sessions      Session[]
    recipes       Recipe[]
}

model VerificationToken {
    identifier      String
    token           String  @unique
    expires         DateTime

    @@unique([identifier, token])
}

model Recipe {
    id                      String  @id @default(cuid())
    name                    String
    creator_id              String
    // Preparation Time
    // Difficulty Level - easy, medium, hard, expert
    cooking_time_minutes    Int
    description             String
    images                  RecipeImage[]
    // recipe_steps            RecipeSteps[]
    recipe_steps            String
    user                    User    @relation(fields: [creator_id], references: [id], onDelete: Cascade)
    video_url               String
    @@index([creator_id])
}

// model RecipeSteps {
//     id                    Int  @id @default(autoincrement())
//     recipe_id             String
//     description           String
//     recipe                Recipe    @relation(fields: [recipe_id], references: [id], onDelete: Cascade)

//     @@index([recipe_id])  
// }

model RecipeImage {
    id              Int  @id @default(autoincrement())
    recipe_id       String
    recipe          Recipe    @relation(fields: [recipe_id], references: [id], onDelete: Cascade)

    @@index([recipe_id])
}

model Ingredients {
    id                  Int  @id @default(autoincrement())
    name                String  @unique
    nutrition           Nutrients[]
}

model Nutrients {
    id                  Int  @id @default(autoincrement())
    name                String
    amount              Float
    unit                String
    ingredient_id       Int
    ingredient          Ingredients    @relation(fields: [ingredient_id], references: [id], onDelete: Cascade)

    @@index([ingredient_id])
}

enum MeasurementUnits {
    GR
    KG
    MG
    CUPS
    ML
    L
// Teaspoon (tsp)
// Tablespoon (tbsp)
// Fluid ounce (fl oz)
// Cup (c)
// Pint (pt)
// Quart (qt)
// Gallon (gal)
// Milliliter (ml)
// Liter (l)
// Gram (g)
// Kilogram (kg)
// Ounce (oz)
// Pound (lb)
// Pinch
// Dash
// Smidgen
// Drop
// Sprinkle
// Handful
// Clove (for garlic)
// Head (for lettuce, cabbage, etc.)
// Slice
// Wedge
// Piece
// Can (typically for canned goods, such as beans or tomatoes)
// Package (typically for pre-packaged goods, such as pasta or cheese)
// Stick (typically for butter or margarine)
// Dozen (typically for eggs or baked goods, such as cookies or donuts)
// Bunch (for herbs or vegetables)
// Stalk (for celery or asparagus)
}

model  RecipeIngredient {
    recipe_id       String
    ingredient_id   Int
    quantity        Float    
    measurement_unit MeasurementUnits

    @@unique([recipe_id, ingredient_id])
}

enum Categories {
Appetizers
Desserts
Vegetarian 
Vegan
// Appetizers
// Main dishes
// Desserts
// Vegetarian or Vegan
// Holiday
// Breakfast
// Beverages
// Side dishes
// Snacks
// Soups and stews
// Salads
// Pasta and noodles
// Rice and grains
// Sandwiches and wraps
// Burgers and sandwiches
// Seafood
// Chicken
// Beef
// Pork
// Lamb
// Game meats (such as venison or elk)
// Casseroles and one-pot meals
// Slow cooker and Instant Pot recipes
// Baked goods (such as bread, cakes, and cookies)
// Gluten-free
// Dairy-free
// Low-carb
// High-protein
// Budget-friendly
// Quick and easy
// Classic recipes
// International cuisine (such as Italian, Mexican, or Chinese)
// Grilling and barbecue
// Pressure cooking
// Fermented foods (such as yogurt, kimchi, or sauerkraut)
// Preserves and canning
// Pickling
// Meal prep and make-ahead recipes
// Comfort food
// Healthy and nutritious recipes.
}

model Category {
    id          Int  @id @default(autoincrement())
    name        String
}

model RecipeCategory {
    recipe_id     String
    category_id   Int

    @@unique([recipe_id, category_id])
}

model UserRecipe {
    recipe_id     String
    category_id   Int

    @@unique([recipe_id, category_id])
}

model UserPreferences {
    user_id         String
    recipe_id       String
    made            Boolean
    favorite        Boolean

    @@unique([user_id, recipe_id])
}

enum MealTypes {
    BREAKFAST
    DINNER
    LUNCH
    SNACK
}

model UserDailyDiet {
    user_id       String
    date          DateTime
    recipe_id     String
    meal_type     MealTypes

    @@unique([user_id, date, recipe_id])
}