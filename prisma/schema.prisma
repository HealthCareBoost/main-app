// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"

}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    // Password ?
    // User Recipes
    // Favorite (Boolean)
    // Made (Boolean)
    image         String?
    accounts      Account[]
    sessions      Session[]
    recipes       Recipe[]
    daily_diet    UserDailyDiet[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @default(now())
    is_deleted    Boolean   @default(false)
}

model NameEmailMap {
    id                      Int  @id @default(autoincrement())
    name                    String
    email                   String   @unique
}

model VerificationToken {
    identifier      String
    token           String  @unique
    expires         DateTime

    @@unique([identifier, token])
}

model Recipe {
    id                      String  @id @default(cuid())
    name                    String
    creator_id              String
    preparation_time        String
    difficulty_level        DifficultyLevel
    cooking_time_minutes    Int
    description             String
    images                  RecipeImage[]
    // recipe_steps            RecipeSteps[]
    recipe_steps            String
    user                    User    @relation(fields: [creator_id], references: [id], onDelete: Cascade)
    categories              RecipeCategory[]
    video_url               String
    createdAt               DateTime  @default(now())
    updatedAt               DateTime  @default(now())
    is_deleted              Boolean   @default(false)   
    total_likes             Int       @default(0)
    daily_diet              UserDailyDiet[]

    @@index([creator_id])
}

// To be added
// model UserLikes {
//     recipe_id             String
//     user_id             String
// }

// model UserComments {
//     recipe_id            String
//     user_id              String
//     text                 String
// }

// model RecipeSteps {
//     id                    Int  @id @default(autoincrement())
//     recipe_id             String
//     description           String
//     recipe                Recipe    @relation(fields: [recipe_id], references: [id], onDelete: Cascade)

//     @@index([recipe_id])  
// }

model RecipeImage {
    id              Int  @id @default(autoincrement())
    // asset_id: "edf513d98bef7cd3216d27dad5917959";
    // id: "uw-file3";
    // public_id: "folder/hcypqsvezocwxymemdzv";
    // signature: "5fe5952664d94c1f684bec1c1ee5de1f5eb73429";
    recipe_id       String
    recipe          Recipe    @relation(fields: [recipe_id], references: [id], onDelete: Cascade)
    path            String
    filename        String
    original_filename    String
    original_extension   String
    format        String
    size_in_bytes   Int
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @default(now())
    is_deleted      Boolean   @default(false) 
    height          Int
    width           Int
    url             String
    @@index([recipe_id])
}

model Ingredients {
    id                  Int  @id @default(autoincrement())
    name                String  @unique
    createdAt           DateTime  @default(now())
    updatedAt           DateTime  @default(now())
    is_deleted          Boolean   @default(false)  
    nutrition           Nutrients[]
}

model Nutrients {
    id                  Int  @id @default(autoincrement())
    name                String
    amount              Float
    unit                String
    ingredient_id       Int
    ingredient          Ingredients    @relation(fields: [ingredient_id], references: [id], onDelete: Cascade)

    @@index([ingredient_id])
}


model  RecipeIngredient {
    recipe_id       String
    ingredient_id   Int
    quantity        Float    
    measurement_unit MeasurementUnits

    @@unique([recipe_id, ingredient_id])
}

model Category {
    id          Int  @id @default(autoincrement())
    name        String
    recipies    RecipeCategory[]
}

model RecipeCategory {
    recipe_id     String
    category_id   Int
    category      Category    @relation(fields: [category_id], references: [id])
    recipe        Recipe    @relation(fields: [recipe_id], references: [id])

    @@id([recipe_id, category_id])
    // @@unique([recipe_id, category_id])
    @@index([category_id])
    @@index([recipe_id])
}

model UserPreferences {
    user_id         String
    recipe_id       String
    made            Boolean
    favorite        Boolean
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @default(now())
    @@unique([user_id, recipe_id])
}

model UserDailyDiet {
    user_id       String
    date          DateTime
    recipe_id     String
    meal_type     MealTypes
    recipe        Recipe    @relation(fields: [recipe_id], references: [id])
    user          User      @relation(fields: [user_id], references: [id])

    // @@unique([user_id, date, recipe_id])
    @@id([user_id, recipe_id, date])
    @@index([recipe_id])
    @@index([user_id])
}

enum TimeUnits {
  seconds
  minutes 
  hours
}

enum DifficultyLevel {
  easy 
  medium
  hard 
  expert
}

enum Categories {
    Appetizer
    Main_Dishe      @map("Main Dish")
    Desserts
    Vegetarian
    Vegan
    Breakfast
    Beverage
    Snack
    Soup
    Salad
    Seafood
    Chicken
    Beef
    Pork
    Lamb
    Slow
    Instant
    Baked
    Gluten_Free     @map("Gluten Free")
    Dairy_Free      @map("Dairy Free")
    Low_carb        @map("Low Carb")
    High_Protein    @map("High Protein")
    Budget_Friendly @map("Budget Friendly")
    Classic
    Grill
    Barbecue
    Healthy
}

enum MealTypes {
    BREAKFAST
    DINNER
    LUNCH
    SNACK
}

enum MeasurementUnits {

    // 1. Volume  
    // 1.1 Metric
    Milliliter
    Liter
    // 1.2 Imperial
    Teaspoon
    Tablespoon
    Fluid_Ounce @map("Fluid Ounce")
    Cup
    Pint
    Quart
    Gallon

    // 2. Weight  
    // 2.1 Metric
    Milligram 
    Gram
    Kilogram
    // 2.2 Imperial
    Pound
    Ounce

    // Others
    Drop
    Pinch
    Dash
    Sprinkle
    Handful
    Clove   // (for garlic)
    Head    // (for lettuce, cabbage, etc.)
    Slice
    Piece
    Can     // (for canned goods, such as beans, tomatoes, etc.)
    Package // (typically for pre-packaged goods, such as pasta or cheese)
    Stick   // (typically for butter or margarine)
    Dozen   // (typically for eggs or baked goods, such as cookies or donuts)
    Bunch   // (for herbs or vegetables)
    Stalk   // (for celery or asparagus)
}